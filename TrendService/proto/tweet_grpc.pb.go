// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tweet.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrendService_PostTrend_FullMethodName = "/proto.TrendService/PostTrend"
)

// TrendServiceClient is the client API for TrendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrendServiceClient interface {
	PostTrend(ctx context.Context, in *PostTrendReq, opts ...grpc.CallOption) (*PostTrendRes, error)
}

type trendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrendServiceClient(cc grpc.ClientConnInterface) TrendServiceClient {
	return &trendServiceClient{cc}
}

func (c *trendServiceClient) PostTrend(ctx context.Context, in *PostTrendReq, opts ...grpc.CallOption) (*PostTrendRes, error) {
	out := new(PostTrendRes)
	err := c.cc.Invoke(ctx, TrendService_PostTrend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrendServiceServer is the server API for TrendService service.
// All implementations must embed UnimplementedTrendServiceServer
// for forward compatibility
type TrendServiceServer interface {
	PostTrend(context.Context, *PostTrendReq) (*PostTrendRes, error)
	mustEmbedUnimplementedTrendServiceServer()
}

// UnimplementedTrendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrendServiceServer struct {
}

func (UnimplementedTrendServiceServer) PostTrend(context.Context, *PostTrendReq) (*PostTrendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTrend not implemented")
}
func (UnimplementedTrendServiceServer) mustEmbedUnimplementedTrendServiceServer() {}

// UnsafeTrendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrendServiceServer will
// result in compilation errors.
type UnsafeTrendServiceServer interface {
	mustEmbedUnimplementedTrendServiceServer()
}

func RegisterTrendServiceServer(s grpc.ServiceRegistrar, srv TrendServiceServer) {
	s.RegisterService(&TrendService_ServiceDesc, srv)
}

func _TrendService_PostTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendServiceServer).PostTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrendService_PostTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendServiceServer).PostTrend(ctx, req.(*PostTrendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TrendService_ServiceDesc is the grpc.ServiceDesc for TrendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TrendService",
	HandlerType: (*TrendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTrend",
			Handler:    _TrendService_PostTrend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweet.proto",
}
